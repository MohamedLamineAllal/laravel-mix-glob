require("colors");const globby=require("globby"),path=require("path"),chokidar=require("chokidar"),mm=require("micromatch"),spawn=require("cross-spawn"),fs=require("fs"),debug=require("debug"),flatCache=require("flat-cache"),LOGGER={log:debug("MixGlob"),err:debug("MixGlob:Error"),debug:debug("MixGlob:debug")};settingUpLogging();const MixGlob=function(){LOGGER.debug("in MixGlob Module");var e,s={sass:{ext:"css"},js:{ext:"js"},less:{ext:"css"},stylus:{ext:"css"},react:{ext:"js"},ts:{ext:"js"},preact:{ext:"js"}};function t(e,s){return"string"==typeof s?s:!(!s||!s.hasOwnProperty(e))&&s[e]}function i(e,s,i){LOGGER.debug("mapExt():"),LOGGER.debug({ext:e,mapping:s,defaultMapping:i});var o=t(e,s);return o||t(e,i)}function o(e,t){let o=null;return s[e]&&(LOGGER.debug("defaultMapExt():\n=========mixFuncs[funcName].ext==========> "),LOGGER.debug(s[e].ext),o=s[e].ext),function(e,s,t){const o=i(e,s,t);if(LOGGER.debug("_mixDefaultMapExt():\n!!!!!!!!!"+String(o)),o)return o;throw"defaultMapExt: no mapping precised, neither it's supported by default"}(e,t,o)}function r(e,s,t,o,r,n,a){let l,h,u,p,g,G;LOGGER.debug("mixBaseGlob ===".bgBlue),LOGGER.log("mix function: %s".yellow,e),LOGGER.log("Glob: ".yellow+s);try{l=function(e){if(Array.isArray(e)||"string"==typeof e)return globby.sync(e);if("object"==typeof e)return globby.sync(e.pattern,e.options);if("function"==typeof e)return e(globby);throw new Error("Wrong glb parameter, possible types are string|array|object ({pattern, options})|function {return <promise> -> resolve paths}")}(s)}catch(e){return void LOGGER.err(e)}LOGGER.log("Matched files ====".green),LOGGER.log(l),this.watchedFiles=[...this.watchedFiles,...l.filter(e=>!this.watchedFiles.includes(e))],this.watchedGlobs=[...this.watchedGlobs,s],a||(LOGGER.debug("! NO WATCH ENTERED !!!!!!!!!!!!! -------"),LOGGER.debug("watching ==first+>".blue),LOGGER.debug(s.yellow),this.watchers.push(chokidar.watch(s,{ignoreInitial:!0}).on("add",e=>{c.call(this,"add",e,s)}).on("unlink",e=>{c.call(this,"unlink",e,s)}).on("unlinkDir",e=>{LOGGER.debug("UNLINK DIR CHOKIDAR -------------"),c.call(this,"unlinkDir",e,s)})));let d,b=this.mapping.ext&&this.mapping.ext.byExt||n,E=this.mapping.base&&(this.mapping.base.byExt||this.mapping.base.byFunc[e]);if(r||(r={}),r.compileSpecifier||(r.compileSpecifier={}),!r.compileSpecifier.disabled){let e="compile";r.compileSpecifier.specifier&&(e=r.compileSpecifier.specifier),g=new RegExp("."+e+".(?!.*"+e+".)","g")}r.mapping&&r.mapping.ext&&(b=r.mapping.ext),r.base&&(E=r.base),l.forEach(s=>{p=path.extname(s).substr(1),h=E?s.replace(function(e,s,t){if("string"==typeof e)return e;if("function"==typeof e)return e(s,t,mm);if("object"==typeof e)return e[t]||e.default}(E,s,p),""):path.basename(s),r.compileSpecifier.disable||(h=h.replace(g,".")),G=new RegExp(p+"$","g"),LOGGER.debug("this.mapping.ext.byExt === "),LOGGER.debug(this.mapping.ext&&this.mapping.ext.byExt),d=i(p,b,n),LOGGER.debug("==> extmap = "+String(d)),p&&p!==d&&(h=h.replace(G,d)),u=path.join(t,h),LOGGER.debug("out ======".bgGreen),LOGGER.log({file:h,out:u}),this.mixInst=o?this.mixInst[e](s,u,o):this.mixInst[e](s,u),LOGGER.debug(`mix ${e} func exec`.yellow),LOGGER.debug({file:s,out:u,mixOptions:o})}),this.totalHandledFilesLogTimeout&&clearTimeout(this.totalHandledFilesLogTimeout),this.totalHandledFilesLogTimeout=setTimeout(function(){LOGGER.log("Total handled files :".cyan),LOGGER.log(this.watchedFiles)}.bind(this),50)}function c(e,s,t){console.log(s);let i="";switch(e){case"add":i="File added :";break;case"unlink":i="File removed :";break;case"unlinkDir":i="Directory removed :"}if(!this.onRestart){this.onRestart=!0;try{if(mm.every(s,t)){LOGGER.log(i.bgBlue),LOGGER.log(s.yellow),LOGGER.log("Corresponding watcher glob: ".bgBlue),LOGGER.log(t),LOGGER.debug(this.watchedGlobs),LOGGER.log("restart...".cyan),this.cache.setKey("is_subprocess",!0),this.cache.save(),LOGGER.debug("is_subprocess = "),LOGGER.debug(this.cache.getKey("is_subprocess"));const e=spawn("npm",["run",this.shouldWatch],{detached:!0,stdio:"inherit",cwd:process.cwd()});e.on("error",e=>{LOGGER.debug("subprocess.on(error)"),LOGGER.err(e),this.cache.setKey("is_subprocess",!1),this.cache.save()}),e.unref(),LOGGER.debug("pid ==== "+e.pid),this.pidsList=[e.pid],this.cache.setKey("pids",this.pidsList),this.cache.save(),setTimeout(()=>{process.exit(0)},1e3)}}catch(e){LOGGER.err(e)}}}function n(e){if(LOGGER.debug("Mix glob constructor"),LOGGER.debug("Mix glob constructor: argv ="),LOGGER.debug(process.argv),LOGGER.log("Mix glob".yellow),this.cache=flatCache.load("laravel-mix-glob"),this.shouldWatch=!!process.argv.some(e=>e.includes("watch"))&&"watch",this.shouldWatch||(this.shouldWatch=!!process.argv.some(e=>e.includes("hot"))&&"hot"),this.shouldWatch&&process&&process.stdout){LOGGER.debug({pidscache:this.cache.getKey("pids"),is_subprocess_cache:this.cache.getKey("is_subprocess")}),this.pidsList=this.cache.getKey("pids")||[],this.is_subprocess=this.cache.getKey("is_subprocess")||!1,LOGGER.debug("READ FROM CACHE"),LOGGER.debug({pidsList:this.pidsList,is_subprocess:this.is_subprocess});let e=!1;this.is_subprocess&&(this.cache.setKey("is_subprocess",!1),e=!0),this.pidsList.length>0&&(this.cache.setKey("pids",[]),e=!0),e&&this.cache.save(),this.onRestart=!1,process.stdout.on("data",e=>{e=e.toString(),this.is_subprocess?(LOGGER.log("To quit type 'c' multiple times".bgBlue),LOGGER.debug(`'${e}'`),"c"!==e&&"C"!==e||(LOGGER.debug('ENTERED data === "c" || "C"'),LOGGER.log("closing ...".green),LOGGER.log("pids ".cyan+JSON.stringify(this.pidsList).yellow),this.cache.setKey("pids",[]),this.cache.save(),this.pidsList.forEach(e=>{try{process.kill(e,"SIGINT")}catch(s){LOGGER.err("Error killing pid ".red+e)}}),LOGGER.log("closed! CONTROL+C now".blue),process.exit(0))):LOGGER.log("CONTROL+C to exit".bgBlue+"  (twice)")}),process.on("SIGINT",()=>{setTimeout(()=>{this.is_subprocess&&(LOGGER.log("SIGINT".bgRed),process.exit(0))},2e3)})}if(!e.mix)throw new Error("mix instance missing!".red);this.mapping=e&&e.mapping||{},this.mixInst=e.mix,this.watchers=[],this.watchedFiles=[],this.watchedGlobs=[],Object.keys(this.mixInst).forEach((e,s)=>{["mix","config","scripts","styles"].includes(e)||(this[e]=function(s,t,i,c){const n=o(e,this.mapping.ext&&this.mapping.ext.byFunc);return r.call(this,e,s,t,i,c,n,!this.shouldWatch),this}.bind(this))})}return(e=n.prototype).createMapping=function(e){},e.mix=function(e){return function(){return this.mixInst[e].apply(this.mixInst,arguments),this}.bind(this)},n}();function settingUpLogging(){if(process.env.DEBUG){const e=process.env.DEBUG.toLowerCase().trim();"1"!==e&&"true"!==e||debug.enable("MixGlob, MixGlob:Error, MixGlob:debug")}else debug.enable("MixGlob, MixGlob:Error");const e=["DEBUG_HIDE_DATE","DEBUG_COLORS","DEBUG_DEPTH","DEBUG_SHOW_HIDDEN"];for(const s of e){const e=s.replace("DEBUG","LOG");process.env[e]&&(process.env[s]=process.env[e])}}module.exports=MixGlob;